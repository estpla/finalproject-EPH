// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Usuarios del sistema (gestores, entrenadores)
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      String   // "admin", "coach", "viewer"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Atletas que entrenan en el gimnasio
model Athlete {
  id              Int              @id @default(autoincrement())
  name            String
  email           String?          @unique
  activeSessionId Int?
  assignedWorkoutId Int?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relaciones
  assignedWorkout Workout?         @relation(fields: [assignedWorkoutId], references: [id])
  sessions        TrainingSession[]
}

// Planes de entrenamiento
model Workout {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Relaciones
  exercises   WorkoutExercise[]
  athletes    Athlete[]
  sessions    TrainingSession[]
}

// Ejercicios disponibles
model Exercise {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  category    String?           // "cardio", "strength", "flexibility", etc.
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Relaciones
  workouts    WorkoutExercise[]
  progress    ExerciseProgress[]
}

// Relación entre planes y ejercicios
model WorkoutExercise {
  id         Int      @id @default(autoincrement())
  workoutId  Int
  exerciseId Int
  sets       Int
  reps       Int
  weight     Float?
  rest       Int?     // Descanso en segundos
  order      Int      // Orden del ejercicio en el plan
  
  // Relaciones
  workout    Workout  @relation(fields: [workoutId], references: [id])
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  
  @@unique([workoutId, exerciseId, order])
}

// Sesiones de entrenamiento
model TrainingSession {
  id        Int       @id @default(autoincrement())
  athleteId Int
  workoutId Int
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  position  Int       @default(0)
  
  // Relaciones
  athlete   Athlete   @relation(fields: [athleteId], references: [id])
  workout   Workout   @relation(fields: [workoutId], references: [id])
  progress  ExerciseProgress[]
}

// Progreso de ejercicios en una sesión
model ExerciseProgress {
  id           Int             @id @default(autoincrement())
  sessionId    Int
  exerciseId   Int
  set          Int
  reps         Int
  weight       Float?
  completed    Boolean         @default(false)
  completedAt  DateTime?
  
  // Relaciones
  session      TrainingSession @relation(fields: [sessionId], references: [id])
  exercise     Exercise        @relation(fields: [exerciseId], references: [id])
  
  @@unique([sessionId, exerciseId, set])
}